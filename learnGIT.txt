---------------- Git的官方网站：http://git-scm.com ------------------

Git学习笔记 by leannmak 2015-7-22

** linux用“man 命令名” 查询命令的使用方式。


1、安装Git（Win7）：

msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可。

安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功。

将Git安装目录下的cmd，bin和libexec\git-core文件完整路径添加到“计算机->属性（右键）->高级系统设置->高级->环境变量->系统变量->Path”中。

配置完成后，可以直接在cmd中使用git命令。


2、自定义Git：

使用git config --global user.name "Your Name"命令配置user.name。

使用git config --global user.email "email@example.com"命令配置user.email。

使用git config --global color.ui true命令让Git输出时显示颜色。

忽略某些Git工作目录中不能提交的文件时，需要在Git工作区的根目录下创建一个特殊的.gitignore文件，\
把要忽略的文件名(比如.pyc)填进去，Git就会自动忽略这些文件。

PS：不需要从头写.gitignore文件，可从https://github.com/github/gitignore中选取组合。

	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理。

使用命令git config --global alias.command_alias command_name给命令command_name配置别名command_alias。

PS：配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。

每个仓库的Git配置文件都放在.git/config文件中。

当前用户的Git配置文件则放在用户主目录下的一个隐藏文件.gitconfig中（如user.name和user.email）。


3、创建版本库：

选择一个合适的地方，用mkdir创建一个空目录（也可以使用已有目录下，不推荐）。

打开空目录，通过git init命令把这个目录初始化成Git可以管理的仓库。

添加文件到Git仓库，分两步：
	
	第一步，使用命令git add file1 file2 ...，注意，可反复多次使用，添加多个文件到暂存区（stage）；
	
	第二步，使用命令git commit将暂存区文件最终提交到当前分支（master），可加-m "comment"添加修改说明，提交后暂存区被清空。
	
	PS: git commit --amend: 修正最近一次的改动。（建议每改动一个函数就push一次）
	
PS: 文件提交路径：工作区--git add-->暂存区--git commit-->当前分支。每次修改如果不add到暂存区，就不会加入到commit中。


4、查看状态：

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你工作区有文件被修改过，用git diff可以查看修改内容。

使用cat file命令随时查看工作区当前文件内容。

提交后，用git diff HEAD -- file命令可以查看工作区和版本库里面最新版本的区别。

* git format-patch (-1): 生成patch文件，可以打出任意两个版本之间的区别。
	-1表示最近的一次变更，后跟commit_id可指定任意commit之间的差异，但每次变更打一个文件。
* git am patch-file

PS：HEAD指向的版本就是版本库里的当前版本，HEAD^指向当前版本的上一版本，HEAD~100指向当前版本的第前100个版本。

	HEAD严格来说不是指向提交（当前版本），而是指向master，master才是指向提交的，所以，HEAD指向的事实上是当前分支。


5、删除文件：

使用rm file命令直接删除工作区中无用的文件。

命令git rm file用于删除版本库中的无用文件。


6、撤销修改：

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

		PS：该命令用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
		
			若为误删文件恢复，会丢失最近一次提交后你修改的内容。

场景2：当你不但改乱了工作区某个文件的内容，还add到了暂存区时，想丢弃修改，分两步：

	   第一步，用命令git reset HEAD file，就回到了场景1；
	   
	   第二步，按场景1操作。

场景3：已经提交了不合适的修改到版本库时，且未推送至远程，想要撤销本次提交，则执行版本回退。


7、版本回退：

Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

PS:	git reset命令既可以把暂存区的修改回退到工作区，也可以回退版本。
	
	--hard：替换分支HEAD指向，替换暂存区，替换工作区；

	--soft：只替换分支HEAD指向；
	
	--mixed（默认值）：替换分支HEAD指向，替换暂存区。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本，加--pretty=oneline可减少输出内容。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


8、分支管理：

查看分支：git branch，会列出所有分支，当前分支前面会标一个*号。

创建分支：git branch <name>

切换分支：git checkout <name>

创建并切换分支：git checkout -b <name> = git branch name + git checkout name。

合并某分支到当前分支：git merge <name>

删除已被合并分支：git branch -d <name>

强制删除未被合并分支：git branch -D <name>

PS：需要理解，HEAD严格来说是指向当前分支master，master才是指向提交（当前版本）的。当分支从master切换到dev后，HEAD就指向了dev。


9、分支合并：

合并分支时，Git会尽可能用Fast-forward即“快进模式”，也就是直接把当前分支指向某分支的当前提交，但这种模式下，删除某分支后，会丢掉分支信息。

git merge命令加上--no-ff参数能够强制禁用Fast forward，用普通模式完成合并，合并后的历史有分支，能看出来曾经做过合并。

PS：git merge --no-ff -m "comment" <name>通过-m "comment"可进一步添加分支合并说明。

当使用git merge命令无法自动合并分支时，Git将在出现冲突的文件中用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，此时必须打开文件查看并根据提示修改内容，然后通过add和commit提交完成合并。

用git log --graph命令可以看到分支合并历史图， 加--pretty=oneline --abbrev-commit简化图中描述内容。


10、BUG修复：

修复bug时，从需要修复bug的分支上创建临时的bug分支进行修复，然后合并，最后删除。

当手头工作没有完成时，先把工作现场git stash一下，然后切换到出现bug的分支去修复bug，修复后返回当前工作分支，再git stash pop，回到工作现场。

PS：git stash pop = git stash apply（恢复现场） + git stash drop（删除stash内容）。

用git stash list命令查看已保存的工作现场。

多次stash时，可以使用git stash apply stash_id命令恢复到指定的工作现场。


11、Feature分支

开发一个新功能时，最好新建一个分支，方便更改和删除。


12、添加远程仓库（先有本地库，再有远程库，关联本地和远程库）：

要关联一个远程库，在需要关联的本地仓库下运行命令git remote add origin git@server-name:path/repo-name.git或者git remote add origin http://server-name/path/repo-name.git。

PS：server-name如：github.com，path如：GitHub账户名（我的为leannmak），repo-name为我的远程库的名字。

	添加后，相对于本地库，远程库的名字就是origin（约定俗成的用法，也可根据自己喜好改）。

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

PS：第一次推送加上-u参数，可以把本地的master分支和远程的master分支关联起来，以便在以后的推送（push）或者拉取（pull）时可以简化命令。

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。


13、克隆远程库（先有远程库，将远程库直接克隆到本地）：

使用git clone git@server-name:path/repo-name.git或git clone http://server-name/path/repo-name.git命令克隆一个远程库。

PS：Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

	使用clone时，Git自动把本地的master分支和远程的master分支对应起来了，并且远程仓库的默认名称是origin。

	默认情况下只关联master分支，即clone后本地库下使用git branch命令只能看到master，其他分支必须使用git checkout -b name origin/name命令才能创建到本地。
	
	PS：创建时本地和远程分支的名称最好一致，若不一致则每次推送时需要指定远程库对应的分支名，即git push origin/branch-name1 branch-name2。

第一次创建远程库到本地时才用git clone，此后每次使用git pull从远程抓取当前分支的最新提交。

PS：git pull命令会同时执行git merge，无冲突就直接将远程分支内容并入本地分支，若有冲突则需要手动解决后提交，完成本地分支的更新，参照“分支合并”。

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
	

14、远程同步与多人协作：

使用git remote命令查看远程库信息，加-v显示更详细的信息。

协作策略：

	远程仓库中使用master分支来发布新版本，为了保证其稳定性，平时不能在上面干活。

	创建一个dev分支上专门用于干活，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本。

	团队里每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

	PS：master分支是主分支，因此本地要时刻与远程同步。

		dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步。

		bug分支只用于在本地修复bug，就没必要推到远程了。

		feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

协作方法：
	
	首先，可以试图用git push origin branch-name推送自己的修改；

	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图抓取远程最新提交并合并；

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin branch-name推送到远程。


15、标签管理

命令git tag <tagname>默认对当前最新提交创建一个标签，后加commit_id可以为指定的任意提交打标签。

命令git tag -a <tagname> -m "comment" commit_id可以指定标签信息，-a指定标签名，-s指定标签说明。

命令git tag -s <tagname> -m "comment" commit_id可以用PGP签名标签，必须首先安装gpg（GnuPG），否则报错。

命令git tag可以查看所有标签。

命令git show <tagname>查看标签详细信息。

命令git push origin <tagname>可以推送一个本地标签。

命令git push origin --tags可以推送全部未推送过的本地标签。

命令git tag -d <tagname>可以删除一个本地标签。

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

PS：若某个标签已被推送至远程，则删除时先删掉本地标签，再删除远程标签。


16、GitHub:

在GitHub上，可以任意Fork开源仓库到自己账号下，参与开源项目。

自己拥有Fork后的仓库的读写权限，可以随意将其clone到本地，干完活再推送回自己的远程仓库。

PS：一定要从自己的账号下clone仓库，这样你才能推送修改，若直接从某开源项目主页克隆，因为没有权限，后续将无法推送修改。

最后，通过在GitHub上发起一个pull request向官方仓库贡献代码。


17. 常见问题：
1）push时遇到error: The requested URL returned error: 403 Forbidden while accessing https://github.com/blah/xxx.git
方法一： git clone https://username:password@github.com/xxxxx/xxx.git
方法二： 修改.git/config文件：url = https://username:password@github.com/xxxxx/xxx.git
